TODO & BUG LIST


*** SSH-ing from one system running screendoor to another system running screendoor does the normal nested-screen-session deal, but in the top-level (local) session, it also seems to add the bottom-level (remove) session's list of windows.  An odd bug/feature.


*** The X-forwarding doesn't seem to be working.   Test on x-ming.   Doesn't work from work, I get:   "generic event extension missing"



*** Enable something like this for each of .bashrc, .bash_login, .zshrc, etc:

source ~/screendoor.sh --call-from-shell

        .....which then does the new if-file-exists test I have written on paper


***  Does screendoor work fine when using it in a non-root account?

***  With multiuser on, can non-root accounts connect to a screendoor session owned by root?


***  Add the "Entering GNU Screen, press any key to cancel."

Credit to Ryan Lynch <ryan.b.lynch@gmail.com>

	`read -s -n 1 -t ${TIMEOUT}`

If you're not familiar with it, 'read' is a BASH builtin that prompts
for terminal input (keyboard, in this case).  Usually, you pass the
name of a variable after all of the options, and 'read' sets the
variable to whatever input it received.

In this case, I don't care about what was input, just whether anything
was input, at all (i.e., did the user press a key?). If 'read' returns
nonzero, there was no input received, meaning the user didn't press
anything.  In my script, if 'read' returns false, I invoke 'screen';
otherwise, I just exit.

The various option flags make this work a lot more neatly:

 * '-s': Don't echo the user's input keystrokes to the terminal.
 * '-n 1': Return immediately after receving 1 character/byte of input
(instead of waiting for a newline).
 * '-t ${TIMEOUT}': If ${TIMEOUT} seconds pass without receiving any
input, return nonzero (false).

I also print this message, right before calling 'read':

"Joining a Screen session in ${TIMEOUT} seconds.  Press any key to
abort and enter BASH normally."



	And, if we detect that this is a login shell (SSH, virtual console (F1, F2, etc): "Press Ctrl-Up to view any login-related messages (such as SSH port-forwarding issues, etc)."  # Note this this is hard to test over Putty since  "clear" does not affect with Putty the same way it does in-person.
	And similar for "Leaving GNU Screen."

		Exiting in ${TIMEOUT} seconds (your Screen session terminated, or you
de-attached).  Press any key to abort and stay in a normal BASH
session.'


	Comment them both out, and add a line "Uncomment to enable message."



***  Possibly: Remove need for "Cornerstone" window, or make it optional and disabled (commented-out) by default.
	Cornerstone is mostly needed to ensure multiuser?  If so, this this line of screenrc, which can be overwritten:
	multiuser off      (or on)

	Perhaps I don't need to have the "Cornerstone" window held open all the time, it can recreated each time it's needed.



***  Minor bug: cannot view messages dislayed during shutdown process, when using screendoor.
	Seems that the messages are sent to /dev/ttyS0.
	cat /dev/ttyS0   --  this will catch them and display them
	so maybe the "shutdown" command needs to be "shutdown && cat /dev/ttyS0"


	WAIT, this is actually normal behavior, I believe.
		The shutdown messages are visible when you are sitting at the terminal.
		But not when using GNU screen remotely over SSH.


***  Can we do without writing/reading variables to a file, and simply "export" and read the variables?  ...and if not in all circumstances, and we do this at least for one or two of the variables?


***  Rather than checking if parent process = screen, would it be better if we check of the $TERM variable = screen?
